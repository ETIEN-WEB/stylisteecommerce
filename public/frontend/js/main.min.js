// WARNING! This file contains some subset of JS that is not supported by type inference.
// You can try checking 'Transpile to ES5' checkbox if you want the types to be inferred
// icon-minus
'use strict';
!function() {
  function $(doc) {
    try {
      return doc.defaultView && doc.defaultView.frameElement || null;
    } catch (t) {
      return null;
    }
  }
  function Popup(options) {
    this.time = options.time;
    this.target = options.target;
    this.rootBounds = show(options.rootBounds);
    this.boundingClientRect = show(options.boundingClientRect);
    this.intersectionRect = show(options.intersectionRect || {
      top : 0,
      bottom : 0,
      left : 0,
      right : 0,
      width : 0,
      height : 0
    });
    this.isIntersecting = !!options.intersectionRect;
    var droprect = this.boundingClientRect;
    var times = droprect.width * droprect.height;
    var coloredImage = this.intersectionRect;
    var time = coloredImage.width * coloredImage.height;
    this.intersectionRatio = times ? Number((time / times).toFixed(4)) : this.isIntersecting ? 1 : 0;
  }
  function update(callback, search) {
    var gotoNewOfflinePage;
    var ajaxInterval;
    var timer;
    var query = search || {};
    if ("function" != typeof callback) {
      throw new Error("callback must be a function");
    }
    if (query.root && 1 != query.root.nodeType && 9 != query.root.nodeType) {
      throw new Error("root must be a Document or Element");
    }
    this._checkForIntersections = (gotoNewOfflinePage = this._checkForIntersections.bind(this), ajaxInterval = this.THROTTLE_TIMEOUT, timer = null, function() {
      if (!timer) {
        timer = setTimeout(function() {
          gotoNewOfflinePage();
          timer = null;
        }, ajaxInterval);
      }
    });
    this._callback = callback;
    this._observationTargets = [];
    this._queuedEntries = [];
    this._rootMarginValues = this._parseRootMargin(query.rootMargin);
    this.thresholds = this._initThresholds(query.threshold);
    this.root = query.root || null;
    this.rootMargin = this._rootMarginValues.map(function(result) {
      return result.value + result.unit;
    }).join(" ");
    this._monitoringDocuments = [];
    this._monitoringUnsubscribes = [];
  }
  function bind(elem, type, fn, useCapture) {
    if ("function" == typeof elem.addEventListener) {
      elem.addEventListener(type, fn, useCapture || false);
    } else {
      if ("function" == typeof elem.attachEvent) {
        elem.attachEvent("on" + type, fn);
      }
    }
  }
  function removeEvent(elem, type, fn, useCapture) {
    if ("function" == typeof elem.removeEventListener) {
      elem.removeEventListener(type, fn, useCapture || false);
    } else {
      if ("function" == typeof elem.detatchEvent) {
        elem.detatchEvent("on" + type, fn);
      }
    }
  }
  function filter(morph) {
    var obj;
    try {
      obj = morph.getBoundingClientRect();
    } catch (t) {
    }
    return obj ? (obj.width && obj.height || (obj = {
      top : obj.top,
      right : obj.right,
      bottom : obj.bottom,
      left : obj.left,
      width : obj.right - obj.left,
      height : obj.bottom - obj.top
    }), obj) : {
      top : 0,
      bottom : 0,
      left : 0,
      right : 0,
      width : 0,
      height : 0
    };
  }
  function show(box) {
    return !box || "x" in box ? box : {
      top : box.top,
      y : box.top,
      bottom : box.bottom,
      left : box.left,
      x : box.left,
      right : box.right,
      width : box.width,
      height : box.height
    };
  }
  function callback(element, container) {
    var top = container.top - element.top;
    var left = container.left - element.left;
    return {
      top : top,
      left : left,
      height : container.height,
      width : container.width,
      bottom : top + container.height,
      right : left + container.width
    };
  }
  function contains(id, fn) {
    var value = fn;
    for (; value;) {
      if (value == id) {
        return true;
      }
      value = next(value);
    }
    return false;
  }
  function next(item) {
    var container = item.parentNode;
    return 9 == item.nodeType && item != undefined ? $(item) : (container && container.assignedSlot && (container = container.assignedSlot.parentNode), container && 11 == container.nodeType && container.host ? container.host : container);
  }
  function f(other) {
    return other && 9 === other.nodeType;
  }
  if ("object" == typeof window) {
    if ("IntersectionObserver" in window && "IntersectionObserverEntry" in window && "intersectionRatio" in window.IntersectionObserverEntry.prototype) {
      if (!("isIntersecting" in window.IntersectionObserverEntry.prototype)) {
        Object.defineProperty(window.IntersectionObserverEntry.prototype, "isIntersecting", {
          get : function() {
            return this.intersectionRatio > 0;
          }
        });
      }
    } else {
      var undefined = function(canCreateDiscussions) {
        var document = window.document;
        var editor = $(document);
        for (; editor;) {
          editor = $(document = editor.ownerDocument);
        }
        return document;
      }();
      var e = [];
      var value = null;
      var width = null;
      update.prototype.THROTTLE_TIMEOUT = 100;
      update.prototype.POLL_INTERVAL = null;
      update.prototype.USE_MUTATION_OBSERVER = true;
      update._setupCrossOriginUpdater = function() {
        return value || (value = function(rId, cInd) {
          width = rId && cInd ? callback(rId, cInd) : {
            top : 0,
            bottom : 0,
            left : 0,
            right : 0,
            width : 0,
            height : 0
          };
          e.forEach(function(canCreateDiscussions) {
            canCreateDiscussions._checkForIntersections();
          });
        }), value;
      };
      update._resetCrossOriginUpdater = function() {
        value = null;
        width = null;
      };
      update.prototype.observe = function(element) {
        if (!this._observationTargets.some(function(popup) {
          return popup.element == element;
        })) {
          if (!element || 1 != element.nodeType) {
            throw new Error("target must be an Element");
          }
          this._registerInstance();
          this._observationTargets.push({
            element : element,
            entry : null
          });
          this._monitorIntersections(element.ownerDocument);
          this._checkForIntersections();
        }
      };
      update.prototype.unobserve = function(parent) {
        this._observationTargets = this._observationTargets.filter(function(sibling) {
          return sibling.element != parent;
        });
        this._unmonitorIntersections(parent.ownerDocument);
        if (0 == this._observationTargets.length) {
          this._unregisterInstance();
        }
      };
      update.prototype.disconnect = function() {
        this._observationTargets = [];
        this._unmonitorAllIntersections();
        this._unregisterInstance();
      };
      update.prototype.takeRecords = function() {
        var t = this._queuedEntries.slice();
        return this._queuedEntries = [], t;
      };
      update.prototype._initThresholds = function(event) {
        var e = event || [0];
        return Array.isArray(e) || (e = [e]), e.sort().filter(function(width, i, sizes) {
          if ("number" != typeof width || isNaN(width) || width < 0 || width > 1) {
            throw new Error("threshold must be a number between 0 and 1 inclusively");
          }
          return width !== sizes[i - 1];
        });
      };
      update.prototype._parseRootMargin = function(indicesCat) {
        var e = (indicesCat || "0px").split(/\s+/).map(function(pattid) {
          var match = /^(-?\d*\.?\d+)(px|%)$/.exec(pattid);
          if (!match) {
            throw new Error("rootMargin must be specified in pixels or percent");
          }
          return {
            value : parseFloat(match[1]),
            unit : match[2]
          };
        });
        return e[1] = e[1] || e[0], e[2] = e[2] || e[0], e[3] = e[3] || e[1], e;
      };
      update.prototype._monitorIntersections = function(document) {
        var window = document.defaultView;
        if (window && -1 == this._monitoringDocuments.indexOf(document)) {
          var name = this._checkForIntersections;
          var workingAnimation = null;
          var a = null;
          if (this.POLL_INTERVAL) {
            workingAnimation = window.setInterval(name, this.POLL_INTERVAL);
          } else {
            bind(window, "resize", name, true);
            bind(document, "scroll", name, true);
            if (this.USE_MUTATION_OBSERVER && "MutationObserver" in window) {
              (a = new window.MutationObserver(name)).observe(document, {
                attributes : true,
                childList : true,
                characterData : true,
                subtree : true
              });
            }
          }
          this._monitoringDocuments.push(document);
          this._monitoringUnsubscribes.push(function() {
            var window = document.defaultView;
            if (window) {
              if (workingAnimation) {
                window.clearInterval(workingAnimation);
              }
              removeEvent(window, "resize", name, true);
            }
            removeEvent(document, "scroll", name, true);
            if (a) {
              a.disconnect();
            }
          });
          var n2 = this.root && (this.root.ownerDocument || this.root) || undefined;
          if (document != n2) {
            var cur = $(document);
            if (cur) {
              this._monitorIntersections(cur.ownerDocument);
            }
          }
        }
      };
      update.prototype._unmonitorIntersections = function(e) {
        var index = this._monitoringDocuments.indexOf(e);
        if (-1 != index) {
          var HOVER = this.root && (this.root.ownerDocument || this.root) || undefined;
          if (!this._observationTargets.some(function(event) {
            var type = event.element.ownerDocument;
            if (type == e) {
              return true;
            }
            for (; type && type != HOVER;) {
              var node = $(type);
              if ((type = node && node.ownerDocument) == e) {
                return true;
              }
            }
            return false;
          })) {
            var bindPort = this._monitoringUnsubscribes[index];
            if (this._monitoringDocuments.splice(index, 1), this._monitoringUnsubscribes.splice(index, 1), bindPort(), e != HOVER) {
              var cur = $(e);
              if (cur) {
                this._unmonitorIntersections(cur.ownerDocument);
              }
            }
          }
        }
      };
      update.prototype._unmonitorAllIntersections = function() {
        var crossfilterable_layers = this._monitoringUnsubscribes.slice(0);
        this._monitoringDocuments.length = 0;
        this._monitoringUnsubscribes.length = 0;
        var layer_i = 0;
        for (; layer_i < crossfilterable_layers.length; layer_i++) {
          crossfilterable_layers[layer_i]();
        }
      };
      update.prototype._checkForIntersections = function() {
        if (this.root || !value || width) {
          var mceIframe = this._rootIsInDom();
          var value = mceIframe ? this._getRootRect() : {
            top : 0,
            bottom : 0,
            left : 0,
            right : 0,
            width : 0,
            height : 0
          };
          this._observationTargets.forEach(function(that) {
            var target = that.element;
            var res = filter(target);
            var r = this._rootContainsTarget(target);
            var range = that.entry;
            var intersectionRect = mceIframe && r && this._computeTargetAndRootIntersection(target, res, value);
            var position = null;
            if (this._rootContainsTarget(target)) {
              if (!(value && !this.root)) {
                position = value;
              }
            } else {
              position = {
                top : 0,
                bottom : 0,
                left : 0,
                right : 0,
                width : 0,
                height : 0
              };
            }
            var falseySection = that.entry = new Popup({
              time : window.performance && performance.now && performance.now(),
              target : target,
              boundingClientRect : res,
              rootBounds : position,
              intersectionRect : intersectionRect
            });
            if (range) {
              if (mceIframe && r) {
                if (this._hasCrossedThreshold(range, falseySection)) {
                  this._queuedEntries.push(falseySection);
                }
              } else {
                if (range && range.isIntersecting) {
                  this._queuedEntries.push(falseySection);
                }
              }
            } else {
              this._queuedEntries.push(falseySection);
            }
          }, this);
          if (this._queuedEntries.length) {
            this._callback(this.takeRecords(), this);
          }
        }
      };
      update.prototype._computeTargetAndRootIntersection = function(element, o, s) {
        if ("none" != window.getComputedStyle(element).display) {
          var e;
          var b;
          var spacing;
          var height;
          var step;
          var a;
          var fontSize;
          var y;
          var t = o;
          var node = next(element);
          var dontPopulate = false;
          for (; !dontPopulate && node;) {
            var res = null;
            var opt = 1 == node.nodeType ? window.getComputedStyle(node) : {};
            if ("none" == opt.display) {
              return null;
            }
            if (node == this.root || 9 == node.nodeType) {
              if (dontPopulate = true, node == this.root || node == undefined) {
                if (value && !this.root) {
                  if (!width || 0 == width.width && 0 == width.height) {
                    node = null;
                    res = null;
                    t = null;
                  } else {
                    res = width;
                  }
                } else {
                  res = s;
                }
              } else {
                var item = next(node);
                var params = item && filter(item);
                var type = item && this._computeTargetAndRootIntersection(item, params, s);
                if (params && type) {
                  node = item;
                  res = callback(params, type);
                } else {
                  node = null;
                  t = null;
                }
              }
            } else {
              var document = node.ownerDocument;
              if (node != document.body && node != document.documentElement && "visible" != opt.overflow) {
                res = filter(node);
              }
            }
            if (res && (e = res, b = t, void 0, void 0, void 0, void 0, void 0, void 0, spacing = Math.max(e.top, b.top), height = Math.min(e.bottom, b.bottom), step = Math.max(e.left, b.left), y = height - spacing, t = (fontSize = (a = Math.min(e.right, b.right)) - step) >= 0 && y >= 0 && {
              top : spacing,
              bottom : height,
              left : step,
              right : a,
              width : fontSize,
              height : y
            } || null), !t) {
              break;
            }
            node = node && next(node);
          }
          return t;
        }
      };
      update.prototype._getRootRect = function() {
        var data;
        if (this.root && !f(this.root)) {
          data = filter(this.root);
        } else {
          var result = f(this.root) ? this.root : undefined;
          var doc = result.documentElement;
          var body = result.body;
          data = {
            top : 0,
            left : 0,
            right : doc.clientWidth || body.clientWidth,
            width : doc.clientWidth || body.clientWidth,
            bottom : doc.clientHeight || body.clientHeight,
            height : doc.clientHeight || body.clientHeight
          };
        }
        return this._expandRectByRootMargin(data);
      };
      update.prototype._expandRectByRootMargin = function(config) {
        var offsets = this._rootMarginValues.map(function(omniDim, i) {
          return "px" == omniDim.unit ? omniDim.value : omniDim.value * (i % 2 ? config.width : config.height) / 100;
        });
        var region = {
          top : config.top - offsets[0],
          right : config.right + offsets[1],
          bottom : config.bottom + offsets[2],
          left : config.left - offsets[3]
        };
        return region.width = region.right - region.left, region.height = region.bottom - region.top, region;
      };
      update.prototype._hasCrossedThreshold = function(range, data) {
        var id = range && range.isIntersecting ? range.intersectionRatio || 0 : -1;
        var key = data.isIntersecting ? data.intersectionRatio || 0 : -1;
        if (id !== key) {
          var fieldNum = 0;
          for (; fieldNum < this.thresholds.length; fieldNum++) {
            var field = this.thresholds[fieldNum];
            if (field == id || field == key || field < id != field < key) {
              return true;
            }
          }
        }
      };
      update.prototype._rootIsInDom = function() {
        return !this.root || contains(undefined, this.root);
      };
      update.prototype._rootContainsTarget = function(e) {
        var document = this.root && (this.root.ownerDocument || this.root) || undefined;
        return contains(document, e) && (!this.root || document == e.ownerDocument);
      };
      update.prototype._registerInstance = function() {
        if (e.indexOf(this) < 0) {
          e.push(this);
        }
      };
      update.prototype._unregisterInstance = function() {
        var t = e.indexOf(this);
        if (-1 != t) {
          e.splice(t, 1);
        }
      };
      window.IntersectionObserver = update;
      window.IntersectionObserverEntry = Popup;
    }
  }
}(), function($) {
  $.extend($.easing, {
    def : "easeOutQuad",
    swing : function(diff, n, c, d, p) {
      return $.easing[$.easing.def](diff, n, c, d, p);
    },
    easeOutQuad : function(x, t, b, c, d) {
      return -c * (t = t / d) * (t - 2) + b;
    },
    easeOutQuint : function(t, d, b, c, dx) {
      return c * ((d = d / dx - 1) * d * d * d * d + 1) + b;
    }
  });
  var $form;
  var part;
  var scrollLeft;
  var o;
  var s;
  var test;
  var stepTimer;
  var modifiedQSink;
  var settings = {
    initialised : false,
    mobile : false,
    minipopup : {
      imageSrc : "",
      imageLink : "#",
      name : "",
      nameLink : "#",
      content : "has been added to your cart.",
      action : '<a href="cart.html" class="btn viewcart">View Cart</a><a href="checkout.html" class="btn btn-dark checkout">Checkout</a>',
      delay : 4E3,
      space : 20,
      template : '<div class="minipopup-box"><div class="product"><figure class="product-media"><a href="{{imageLink}}"><img src="{{imageSrc}}" alt="product" width="60" height="60"></a></figure><div class="product-detail"><a href="{{nameLink}}" class="product-name">{{name}}</a><p>{{content}}</p></div></div><div class="product-action">{{action}}</div><button class="mfp-close"></button></div>'
    },
    init : function() {
      if (!this.initialised) {
        this.initialised = true;
        this.checkMobile();
        this.stickyHeader();
        this.headerSearchToggle();
        this.mMenuIcons();
        this.mMenuToggle();
        this.mobileMenu();
        this.scrollToTop();
        this.quantityInputs();
        this.alert();
        this.countTo();
        this.tooltip();
        this.popover();
        this.changePassToggle();
        this.changeBillToggle();
        this.catAccordion();
        this.toggleFilter();
        this.toggleSidebar();
        this.toggleCart();
        this.linkToTab();
        this.productTabSroll();
        this.scrollToElement();
        this.loginPopup();
        this.productManage();
        this.ratingTooltip();
        this.windowClick();
        this.popupMenu();
        this.topNotice();
        this.ratingForm();
        this.parallax();
        this.sideMenu();
        this.miniPopup.init();
        this.initProductSinglePage();
        this.initCollapsibleWidget();
        this.initProductsScrollLoad(".scroll-load");
        this.productsCartAction();
        this.productsWishlistAction();
        this.initPurchasedMinipopup();
        this.initJqueryParallax();
        this.ajaxLoadProducts();
        this.categoryNavScroll();
        this.wordRotate();
        this.footerReveal();
        this.videoModal();
        this.animPlayBtn();
        if ($.fn.superfish) {
          this.menuInit();
        }
        if ($.fn.countdown) {
          this.countDown();
        }
        if ($.fn.owlCarousel) {
          this.owlCarousels();
        }
        if ("object" == typeof noUiSlider) {
          this.filterSlider();
        }
        if ($.fn.themeSticky) {
          this.stickySidebar();
        }
        if ($.fn.magnificPopup) {
          this.lightBox();
        }
        if ($.fn.isotope) {
          this.isotopes();
        }
        if ($.fn.elevateZoom) {
          this.zoomImage();
        }
        if ($.fn.themePluginFloatElement) {
          this.floatElement();
        }
      }
    },
    floatElement : function() {
      $(function() {
        $("body").find("[data-plugin-float-element]:not(.manual)").each(function() {
          var e;
          var $elem = $(this);
          var n = $elem.data("plugin-options");
          if (n && (e = n), "string" == typeof e) {
            try {
              e = JSON.parse(e.replace(/'/g, '"').replace(";", ""));
            } catch (t) {
            }
          }
          $elem.themePluginFloatElement(e);
        });
      });
    },
    animPlayBtn : function() {
      $(document).on("click", ".anim-play-btn", function() {
        var e;
        var i = $(this).closest(".anim-pane").find("[data-animation-name]");
        e = i.attr("data-animation-name");
        i.removeClass(e);
        setTimeout(function() {
          i.addClass(e);
        }, 200);
      });
    },
    checkMobile : function() {
      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
        this.mobile = true;
      } else {
        this.mobile = false;
      }
    },
    initCollapsibleWidget : function() {
      $(".sidebar-wrapper .widget-title").on("click", function(canCreateDiscussions) {
        setTimeout(function() {
          settings.stickySidebar();
        }, 320);
      });
    },
    countDown : function() {
      $(".product-countdown").add(".countdown").each(function() {
        var self = $(this);
        var dates = self.data("until");
        var compact = self.data("compact");
        var sourceFormat = self.data("format") ? self.data("format") : "DHMS";
        var labelStats = self.data("labels-short") ? ["Years", "Months", "Weeks", "Days", "Hours", "Mins", "Secs"] : ["Years", "Months", "Weeks", "Days", "Hours", "Minutes", "Seconds"];
        var a = self.data("labels-short") ? ["Year", "Month", "Week", "Day", "Hour", "Min", "Sec"] : ["Year", "Month", "Week", "Day", "Hour", "Minute", "Second"];
        if (self.data("relative")) {
          end = dates;
        } else {
          var sArrDayId = dates.split(", ");
          var end = new Date(sArrDayId[0], sArrDayId[1] - 1, sArrDayId[2]);
        }
        self.countdown({
          until : end,
          format : sourceFormat,
          padZeroes : true,
          compact : compact,
          compactLabels : ["y", "m", "w", " days,"],
          timeSeparator : " : ",
          labels : labelStats,
          labels1 : a
        });
      });
    },
    appearAnimate : function() {
      var timers = new Array;
      $('.owl-item [data-animation-name="splitRight"]').each(function() {
        var onCompleteBindings = $(this).text();
        var START_POINT = $(this).data("animation-delay") ? $(this).data("animation-delay") : "0";
        $(this).text("");
        var i = onCompleteBindings.length - 1;
        for (; i >= 0; i--) {
          $(this).prepend('<div class="d-inline-block appear-animate" data-animation-delay="' + (START_POINT + 90 * i) + '">' + (" " === onCompleteBindings[i] ? "&nbsp" : onCompleteBindings[i]) + "</div>");
        }
      });
      this.intObs(".appear-animate", function() {
        if (!$(this).hasClass("animated")) {
          var a;
          var cur_value;
          var initialOffsetWidth;
          var $elem = $(this);
          if ($elem.closest(".owl-carousel.slide-animate").length > 0 && 0 === $elem.closest(".owl-item.active").length) {
            return;
          }
          a = $elem.data("animation-name") ? $elem.data("animation-name") : "fadeIn";
          initialOffsetWidth = $elem.data("animation-duration") ? $elem.data("animation-duration") : "1000";
          cur_value = $elem.data("animation-delay") ? $elem.data("animation-delay") : "0";
          $elem.addClass("animated");
          var i = setTimeout(function() {
            $elem.addClass(a);
            $elem.css("animationDuration", initialOffsetWidth + "ms");
            $elem.addClass("appear-animation-visible");
          }, parseInt(cur_value || 0));
          if ($elem.closest(".owl-carousel.slide-animate").length > 0) {
            timers.push(i);
          }
        }
      }, {});
      $(".appear-animate-svg").each(function() {
        if (!$(this).hasClass("animated")) {
          $(this).appear(function() {
            var a;
            var cur_value;
            var initialOffsetWidth;
            var $elem = $(this);
            a = $elem.data("animation-name") ? $elem.data("animation-name") : "customLineAnim";
            initialOffsetWidth = $elem.data("animation-duration") ? $elem.data("animation-duration") : "1000";
            cur_value = $elem.data("animation-delay") ? $elem.data("animation-delay") : "0";
            $elem.addClass("animated");
            var i = setTimeout(function() {
              $elem.addClass(a);
              $elem.css("animationDuration", initialOffsetWidth + "ms");
              $elem.addClass("appear-animation-visible");
            }, parseInt(cur_value || 0));
            timers.push(i);
          }, {
            accX : $(this).data("x") ? $(this).data("x") : 0,
            accY : $(this).data("y") ? $(this).data("y") : -50
          });
        }
      });
      $(".owl-carousel.slide-animate").each(function() {
        var filteredView;
        $(this).on("translate.owl.carousel", function(canCreateDiscussions) {
          filteredView = $(this).find(".owl-item.active");
        });
        $(this).on("translated.owl.carousel", function(n) {
          var $sharepreview = $(this);
          if ($(this).find(".owl-item.active")[0] !== filteredView[0]) {
            var i = 0;
            for (; i < timers.length; i++) {
              clearTimeout(timers[i]);
            }
            timers = timers.splice();
            filteredView.find(".appear-animate").removeClass("appear-animation-visible");
            filteredView.find(".appear-animate").css("animationDelay", "");
            filteredView.find(".appear-animate").css("animationDuration", "");
            filteredView.find(".appear-animate").removeClass("animated");
            filteredView.find(".appear-animate").each(function() {
              var e;
              var $elem = $(this);
              e = $elem.data("animation-name") ? $elem.data("animation-name") : "fadeIn";
              $elem.removeClass(e);
            });
          }
          $sharepreview.find(".owl-item.active .appear-animate").each(function() {
            var a;
            var value;
            var initialOffsetWidth;
            var $elem = $(this);
            a = $elem.data("animation-name") ? $elem.data("animation-name") : "fadeIn";
            initialOffsetWidth = $elem.data("animation-duration") ? $elem.data("animation-duration") : "1000";
            value = $elem.data("animation-delay") ? $elem.data("animation-delay") : "0";
            $elem.addClass(a);
            if ("splitRight" != a) {
              $elem.css("animationDelay", value + "ms");
              $elem.css("animationDuration", initialOffsetWidth + "ms");
            }
            $elem.addClass("animated");
            var i = setTimeout(function() {
              $elem.addClass("appear-animation-visible");
            }, parseInt(value || 0));
            timers.push(i);
          });
        });
      });
    },
    initProductsScrollLoad : function(e) {
      var newY;
      var t = $(e);
      var init_ui = function(elem) {
        if (window.pageYOffset > newY + t.outerHeight() - window.innerHeight - 150 && "loading" != t.data("load-state")) {
          $.ajax({
            url : "ajax/category-ajax-products.html",
            success : function(e) {
              var i = $(e);
              t.data("load-state", "loading");
              if (!t.next().hasClass("bounce-loader")) {
                $('<div class="bounce-loader"><div class="bounce1"></div><div class="bounce2"></div><div class="bounce3"></div></div>').insertAfter(t);
              }
              setTimeout(function() {
                t.append(i);
                setTimeout(function() {
                  t.find(".col-6.fade:not(.in)").addClass("in");
                }, 200);
                t.data("load-state", "loaded");
                if (index >= 2) {
                  t.next().css("display", "none");
                }
              }, 1500);
              var index = parseInt(t.data("load-count") ? t.data("load-count") : 0);
              t.data("load-count", ++index);
              if (index >= 2) {
                window.removeEventListener("scroll", init_ui, {
                  passive : true
                });
              }
            },
            failure : function() {
              $this.text("Sorry something went wrong.");
            }
          });
        }
      };
      if (t.length > 0) {
        newY = t.offset().top;
        window.addEventListener("scroll", init_ui, {
          passive : true
        });
      }
    },
    menuInit : function() {
      $(".menu:not(.menu-vertical):not(.no-superfish)").superfish({
        popUpSelector : "ul, .megamenu",
        hoverClass : "show",
        delay : 0,
        speed : 80,
        speedOut : 80,
        autoArrows : true
      });
      $(".menu.menu-vertical.no-animation").superfish({
        popUpSelector : "ul, .megamenu",
        hoverClass : "show",
        delay : 0,
        speed : 200,
        speedOut : 200,
        autoArrows : true
      });
      $(".menu.menu-vertical:not(.no-superfish)").superfish({
        popUpSelector : "ul, .megamenu",
        hoverClass : "show",
        delay : 0,
        speed : 200,
        speedOut : 200,
        autoArrows : true,
        animation : {
          left : "100%",
          opacity : "show"
        },
        animationOut : {
          left : "90%",
          opacity : "hide"
        }
      });
      var resize = function() {
        $(".menu:not(.menu-vertical):not(.no-superfish) .megamenu-fixed-width").each(function() {
          var el = $(this);
          var dups = el.parent().offset().left - 15;
          var n = el.outerWidth();
          var i = $(window).width() - 45 - dups - n;
          if (i < 0) {
            el.css("left", i + "px");
          } else {
            el.css("left", "-15px");
          }
        });
      };
      resize();
      if ($.fn.smartresize) {
        $(window).smartresize(resize);
      } else {
        $(window).on("resize", resize);
      }
    },
    stickyHeader : function() {
      var canAccessMyFiles = false;
      var $columnHeaders = null;
      var configs = null;
      var canViewMyFiles = 992 > $(window).width();
      var resize = function(origin, color, t) {
        if (!origin.hasClass("fixed")) {
          origin.parent().css("min-height", color.height);
          $columnHeaders.filter(".fixed").each(function() {
            t = t + $(this).outerHeight();
          });
          origin.addClass("fixed").css("top", -color.height).animate({
            top : t
          });
          origin.find(".product-action").removeClass("d-none");
        }
      };
      var hide = function(origin, callback) {
        if (origin.hasClass("fixed")) {
          origin.removeClass("fixed");
          origin.css("top", "");
          origin.parent().css("min-height", "");
          if (!origin.find(".product-action").hasClass("d-none") > 0) {
            origin.find(".product-action").addClass("d-none");
          }
        }
      };
      var update = function() {
        if (canAccessMyFiles) {
          configs.forEach(function(state, i) {
            if (state.mobile === !canViewMyFiles) {
              var child = $($columnHeaders[i]);
              var options = JSON.parse(child.data("sticky-options").replace(/'/g, '"').replace(";", ""));
              state.height = child.outerHeight(true);
              state.offset = options.offset ? options.offset : child.offset().top;
              state.paddingTop = parseInt(child.css("padding-top"));
            } else {
              if (state.mobile === canViewMyFiles) {
                child = $($columnHeaders[i]);
                hide(child);
              }
            }
          });
        } else {
          configs = [];
          $columnHeaders = $(".sticky-header").each(function() {
            var $this = $(this);
            var fragmentFilename = $this.data("sticky-options");
            var config = {};
            if (fragmentFilename) {
              config = JSON.parse(fragmentFilename.replace(/'/g, '"').replace(";", ""));
            }
            config.height = $this.outerHeight(true);
            config.offset = config.offset || $this.offset().top;
            config.paddingTop = parseInt($this.css("padding-top"));
            configs.push(config);
            if (!$this.parent().hasClass("sticky-wrapper")) {
              $this.wrap('<div class="sticky-wrapper"></div>');
            }
          });
          canAccessMyFiles = true;
        }
      };
      var init = function() {
        if (992 > $(window).width()) {
          if (!(canViewMyFiles && canAccessMyFiles)) {
            update();
          }
          canViewMyFiles = true;
          var imgfiles = $(window).scrollTop();
          var icon = 0;
          if ($columnHeaders.each(function(n) {
            var element = $(this);
            var config = configs[n];
            if (false !== config.mobile && imgfiles + icon > config.offset + config.paddingTop) {
              if (!element.hasClass("fixed")) {
                resize(element, config, icon);
              }
            } else {
              if (!(true !== config.mobile && !element.hasClass("fixed") && canAccessMyFiles)) {
                hide(element);
              }
            }
          }), $(".sticky-navbar") && 576 > $(window).width()) {
            if ((imgfiles = $(window).scrollTop()) >= 300) {
              $(".sticky-navbar").addClass("fixed");
            } else {
              $(".sticky-navbar").removeClass("fixed");
            }
          }
        } else {
          if (!(!canViewMyFiles && canAccessMyFiles)) {
            update();
          }
          canViewMyFiles = false;
          imgfiles = $(window).scrollTop();
          icon = 0;
          $columnHeaders.each(function(n) {
            var element = $(this);
            var config = configs[n];
            if (true !== config.mobile && imgfiles + icon > config.offset + config.paddingTop) {
              if (!element.hasClass("fixed")) {
                resize(element, config, icon);
              }
            } else {
              if (!(false !== config.mobile && !element.hasClass("fixed") && canAccessMyFiles)) {
                hide(element);
              }
            }
          });
        }
      };
      setTimeout(init, 500);
      $(window).smartresize(init);
      $(window).on("scroll", init);
    },
    headerSearchToggle : function() {
      if ($(".header-search").length) {
        $("body").on("click", ".header-search", function(event) {
          event.stopPropagation();
        }).on("click", ".search-toggle", function(event) {
          var $versionEl = $(this).closest(".header-search");
          $versionEl.toggleClass("show");
          $(".header-search-wrapper").toggleClass("show");
          if ($versionEl.hasClass("show")) {
            $versionEl.find("input.form-control").focus();
          }
          event.preventDefault();
        }).on("click", function(canCreateDiscussions) {
          $(".header-search").removeClass("show");
          $(".header-search-wrapper").removeClass("show");
          $("body").removeClass("is-search-active");
        });
      }
      var resize = function() {
        $(".header-search").each(function() {
          var $seekBar = $(this);
          $seekBar.find(".header-search-wrapper").css($(window).width() < 576 ? {
            left : 15 - $seekBar.offset().left + "px",
            right : 25 + $seekBar.offset().left + $seekBar.width() - $(window).width() + "px"
          } : {
            left : "",
            right : ""
          });
        });
      };
      resize();
      if ($.fn.smartresize) {
        $(window).smartresize(resize);
      } else {
        $(window).on("resize", resize);
      }
    },
    mMenuToggle : function() {
      if ($(".sidebar-home").find(".menu-vertical").length > 0) {
        $(".menu-vertical .menu-btn").on("click", function(event) {
          if (window.innerWidth < 992) {
            var $priorityLink = $(this);
            event.preventDefault();
            event.stopPropagation();
            $priorityLink.closest("li").find(">ul, .megamenu").slideToggle();
          }
        });
      }
      $(".mobile-menu-toggler").on("click", function(event) {
        $("body").toggleClass("mmenu-active");
        $(this).toggleClass("active");
        event.preventDefault();
      });
      $(".menu-toggler").on("click", function(event) {
        if ($(window).width() >= 992) {
          $(".main-dropdown-menu").toggleClass("show");
        } else {
          $("body").toggleClass("mmenu-active");
        }
        event.preventDefault();
      });
      $(".mobile-menu-overlay, .mobile-menu-close").on("click", function(event) {
        $("body").removeClass("mmenu-active");
        $(".menu-toggler").removeClass("active");
        event.preventDefault();
      });
      $(".menu-item > a").on("click", function(event) {
        $("body").toggleClass("mmenu-depart-active");
        $(this).siblings(".menu-depart").toggleClass("opened");
        event.preventDefault();
      });
    },
    mMenuIcons : function() {
      $(".mobile-menu").find("li").each(function() {
        var e = $(this);
        if (e.find("ul").length) {
          $("<span/>", {
            class : "mmenu-btn"
          }).appendTo(e.children("a"));
        }
      });
    },
    mobileMenu : function() {
      $(".mmenu-btn").on("click", function(event) {
        var $customSelect = $(this).closest("li");
        var squanchSlider = $customSelect.find("ul").eq(0);
        if ($customSelect.hasClass("open")) {
          squanchSlider.slideUp(300, function() {
            $customSelect.removeClass("open");
          });
        } else {
          squanchSlider.slideDown(300, function() {
            $customSelect.addClass("open");
          });
        }
        event.stopPropagation();
        event.preventDefault();
      });
    },
    owlCarousels : function() {
      var defaults = {
        loop : true,
        margin : 0,
        responsiveClass : true,
        nav : false,
        navText : ['<i class="icon-angle-left">', '<i class="icon-angle-right">'],
        dots : true,
        autoplay : false,
        autoplayTimeout : 15E3,
        items : 1
      };
      var callback = function(target, options) {
        var config;
        config = options ? $.extend(true, {}, defaults, options) : defaults;
        if (target.hasClass("nav-thin")) {
          config.navText = ['<i class="icon-left-open-big">', '<i class="icon-right-open-big">'];
        }
        var opts = target.data("owl-options");
        if ("string" == typeof opts) {
          opts = JSON.parse(opts.replace(/'/g, '"').replace(";", ""));
          config = $.extend(true, {}, config, opts);
        }
        target.on("initialize.owl.carousel", render);
        target.owlCarousel(config);
      };
      var render = function(lagOffset) {
        var nth_idx;
        var oldValue;
        var nthword = ["", "-xs", "-sm", "-md", "-lg", "-xl", "-xxl"];
        this.classList.remove("row");
        nth_idx = 0;
        for (; nth_idx < 7; ++nth_idx) {
          oldValue = 1;
          for (; oldValue <= 12; ++oldValue) {
            this.classList.remove("cols" + nthword[nth_idx] + "-" + oldValue);
          }
        }
        this.classList.remove("gutter-no");
        this.classList.remove("gutter-sm");
        this.classList.remove("gutter-lg");
      };
      var mailboxes = {
        ".home-slider" : {
          lazyLoad : false,
          autoplay : false,
          dots : false,
          nav : true,
          autoplayTimeout : 12E3,
          animateOut : "fadeOut",
          navText : ['<i class="icon-left-open-big">', '<i class="icon-right-open-big">'],
          loop : true
        },
        ".testimonials-carousel" : {
          lazyLoad : false,
          autoHeight : true,
          responsive : {
            992 : {
              items : 2
            }
          }
        },
        ".featured-products" : {
          loop : false,
          margin : 30,
          autoplay : false,
          responsive : {
            0 : {
              items : 2
            },
            700 : {
              items : 3,
              margin : 15
            },
            1200 : {
              items : 4
            }
          }
        },
        ".cats-slider" : {
          loop : false,
          margin : 20,
          autoplay : false,
          nav : true,
          dots : false,
          items : 2,
          responsive : {
            576 : {
              items : 3
            },
            992 : {
              items : 4
            },
            1200 : {
              items : 5
            },
            1400 : {
              items : 6
            }
          }
        },
        ".products-slider.5col" : {
          loop : false,
          margin : 20,
          autoplay : false,
          dots : false,
          items : 2,
          responsive : {
            576 : {
              items : 3
            },
            768 : {
              items : 4
            },
            992 : {
              items : 5
            }
          }
        },
        ".products-slider" : {
          loop : false,
          margin : 20,
          autoplay : false,
          dots : true,
          items : 2,
          responsive : {
            576 : {
              items : 3
            },
            992 : {
              items : 4
            }
          }
        },
        ".categories-slider" : {
          loop : false,
          margin : 20,
          autoplay : false,
          nav : true,
          dots : false,
          items : 2,
          responsive : {
            576 : {
              items : 3
            },
            992 : {
              items : 5
            }
          }
        },
        ".quantity-inputs" : {
          items : 2,
          margin : 20,
          dots : false,
          nav : true,
          responsive : {
            992 : {
              items : 4
            },
            768 : {
              items : 3
            }
          },
          onInitialized : function() {
            this.$element.find(".horizontal-quantity").val(1);
          }
        },
        ".banners-slider" : {
          dots : true,
          loop : false,
          margin : 20,
          responsive : {
            576 : {
              items : 2
            },
            992 : {
              items : 3
            }
          }
        },
        ".brands-slider" : {
          loop : false,
          margin : 20,
          autoHeight : true,
          autoplay : false,
          dots : false,
          navText : ['<i class="icon-left-open-big">', '<i class="icon-right-open-big">'],
          items : 2,
          responsive : {
            0 : {
              items : 2
            },
            480 : {
              items : 3
            },
            768 : {
              items : 4
            },
            991 : {
              items : 5
            },
            1200 : {
              items : 6
            }
          }
        },
        ".instagram-feed-carousel" : {
          loop : true,
          dots : false,
          autoplay : false,
          responsive : {
            0 : {
              items : 2
            },
            480 : {
              items : 3
            },
            768 : {
              items : 5
            },
            992 : {
              items : 6
            },
            1200 : {
              items : 7
            },
            1400 : {
              items : 8
            },
            1600 : {
              items : 9
            },
            1800 : {
              items : 10
            }
          }
        },
        ".widget-featured-products" : {
          margin : 20,
          lazyLoad : true,
          nav : true,
          navText : ['<i class="icon-angle-left">', '<i class="icon-angle-right">'],
          dots : false,
          autoHeight : true
        },
        ".entry-slider" : {
          margin : 0,
          lazyLoad : true
        },
        ".related-posts-carousel" : {
          loop : false,
          margin : 30,
          autoplay : false,
          responsive : {
            480 : {
              items : 2
            },
            1200 : {
              items : 3
            }
          }
        },
        ".boxed-slider" : {
          lazyLoad : true,
          autoplayTimeout : 2E4,
          animateOut : "fadeOut",
          dots : false
        },
        ".about-slider" : {
          margin : 0,
          lazyLoad : true
        },
        ".product-single-default .product-single-carousel" : {
          margin : 0,
          nav : true,
          loop : false,
          dotsContainer : "#carousel-custom-dots",
          autoplay : false,
          onResized : function() {
            var $e = this.$element;
            if ($.fn.elevateZoom) {
              $e.find("img").each(function() {
                var image = $(this);
                var options = {
                  responsive : true,
                  zoomWindowFadeIn : 350,
                  zoomWindowFadeOut : 200,
                  borderSize : 0,
                  zoomContainer : image.parent(),
                  zoomType : "inner",
                  cursor : "grab"
                };
                image.elevateZoom(options);
              });
            }
          },
          onInitialized : function() {
            var $e = this.$element;
            if ($.fn.elevateZoom) {
              $e.find("img").each(function() {
                var image = $(this);
                var options = {
                  responsive : true,
                  zoomWindowFadeIn : 350,
                  zoomWindowFadeOut : 200,
                  borderSize : 0,
                  zoomContainer : image.parent(),
                  zoomType : "inner",
                  cursor : "grab"
                };
                image.elevateZoom(options);
              });
            }
          }
        },
        ".product-single-extended .product-single-carousel" : {
          dots : false,
          autoplay : false,
          center : true,
          items : 1,
          responsive : {
            768 : {
              items : 3
            }
          }
        }
      };
      Object.keys(mailboxes).forEach(function(i) {
        $(i).each(function() {
          callback($(this), mailboxes[i]);
        });
      });
      $(".owl-carousel").each(function() {
        if (!$(this).data("owl.carousel")) {
          callback($(this), callback);
        }
      });
      $(".home-slider").on("loaded.owl.lazy", function(mouseEventData) {
        $(mouseEventData.element).closest(".home-slide").addClass("loaded");
        $(mouseEventData.element).closest(".home-slider").addClass("loaded");
      });
      $(".boxed-slider").on("loaded.owl.lazy", function(mouseEventData) {
        $(mouseEventData.element).closest(".category-slide").addClass("loaded");
      });
      $(".about-slider").on("loaded.owl.lazy", function(mouseEventData) {
        $(mouseEventData.element).closest("div").addClass("loaded");
      });
      $(".home-slider.with-dots-container").each(function() {
        var $module = $(this);
        var dom = $module.parent().find(".home-slider-thumbs");
        var n = dom.children();
        n.eq(0).addClass("active");
        dom.addClass("owl-carousel owl-theme").owlCarousel({
          nav : false,
          dots : false,
          items : 3,
          margin : 10
        });
        n.click(function() {
          var $n = $(this);
          var value = ($n.parent().filter(dom).length ? $n : $n.parent()).index();
          $module.trigger("to.owl.carousel", value);
        });
        $module.on("translate.owl.carousel", function(event) {
          var color = (event.item.index - $(event.currentTarget).find(".cloned").length / 2 + event.item.count) % event.item.count;
          var s = n.eq(color);
          n.filter(".active").removeClass("active");
          s.addClass("active");
          dom.trigger("to.owl.carousel", color);
        });
      });
      $(".home-slider-sidebar").each(function() {
        var e = $(this);
        var $mmEvents = e.parent().find(".home-slider");
        var n = e.find("li");
        n.click(function() {
          var data = $(this).index();
          $mmEvents.trigger("to.owl.carousel", data);
        });
        $mmEvents.on("translate.owl.carousel", function(event) {
          var o = (event.item.index - $(event.currentTarget).find(".cloned").length / 2 + event.item.count) % event.item.count;
          var $entry = n.eq(o);
          n.filter(".active").removeClass("active");
          $entry.addClass("active");
          e.trigger("to.owl.carousel", o);
        });
      });
    },
    filterSlider : function() {
      var slider = document.getElementById("price-slider");
      if (null != slider) {
        noUiSlider.create(slider, {
          start : [0, 1E6],
          connect : true,
          step : 100,
          margin : 100,
          range : {
            min : 0,
            max : 1E6
          }
        });
        slider.noUiSlider.on("update", function(e, i) {
          e = e.map(function(value) {
            return parseInt(value) + " fcfa";
          });
          //alert(e.join(" - "));
          $("#filter-price-range").text(e.join(" - "));
        });
      }
    },
    stickySidebar : function() {
      var top = 10;
      var minWidth = 992;
      $(".header-bottom.sticky-header").each(function() {
        top = top + $(this).height();
      });
      $(".sidebar-wrapper").each(function() {
        if ($(this).data("sticky-sidebar-options")) {
          top = $(this).data("sticky-sidebar-options").offsetTop;
          minWidth = $(this).data("sticky-sidebar-options").minWidth;
        }
      });
      $(".sidebar-wrapper, .sticky-slider").themeSticky({
        autoInit : true,
        minWidth : minWidth,
        containerSelector : ".row, .container",
        paddingOffsetBottom : 10,
        paddingOffsetTop : top
      });
    },
    countTo : function() {
      if ($.fn.numerator) {
        $(".count-to").each(function() {
          var self = $(this);
          var params = {
            fromValue : self.data("fromvalue"),
            toValue : self.data("tovalue"),
            duration : self.data("duration"),
            delimiter : self.data("delimiter"),
            rounding : self.data("round")
          };
          $.extend(params, {
            onComplete : function() {
              if (self.data("append")) {
                self.html(self.html() + self.data("append"));
              }
              if (self.data("prepend")) {
                self.html(self.data("prepend") + self.html());
              }
            }
          });
          self.appear(function() {
            setTimeout(function() {
              self.numerator(params);
            }, 300);
          });
        });
      }
    },
    alert : function() {
      $(".alert-dismissible").each(function() {
        $(this).append('<button class="alert-close" />');
      });
      $(".alert-dismissible .alert-close").on("click", function(canCreateDiscussions) {
        var editActionMapNode = $(this).closest(".alert-dismissible");
        editActionMapNode.fadeOut(function() {
          editActionMapNode.remove();
        });
      });
    },
    tooltip : function() {
      if ($.fn.tooltip) {
        $('[data-toggle="tooltip"]').tooltip({
          trigger : "hover focus"
        });
      }
    },
    popover : function() {
      if ($.fn.popover) {
        $('[data-toggle="popover"]').popover({
          trigger : "focus"
        });
      }
    },
    changePassToggle : function() {
      $("#change-pass-checkbox").on("change", function() {
        $("#account-chage-pass").toggleClass("show");
      });
    },
    changeBillToggle : function() {
      $("#change-bill-address").on("change", function() {
        $("#checkout-shipping-address").toggleClass("show");
        $("#new-checkout-address").toggleClass("show");
      });
    },
    catAccordion : function() {
      $(".catAccordion").on("shown.bs.collapse", function(jEvent) {
        var prevLi = $(jEvent.target).closest("li");
        if (!prevLi.hasClass("open")) {
          prevLi.addClass("open");
        }
      }).on("hidden.bs.collapse", function(jEvent) {
        var sortableContainer = $(jEvent.target).closest("li");
        if (sortableContainer.hasClass("open")) {
          sortableContainer.removeClass("open");
        }
      });
    },
    scrollBtnAppear : function() {
      if ($(window).scrollTop() >= 400) {
        $("#scroll-top").addClass("fixed");
      } else {
        $("#scroll-top").removeClass("fixed");
      }
    },
    scrollToTop : function() {
      $("#scroll-top").on("click", function(event) {
        $("html, body").animate({
          scrollTop : 0
        }, 1200);
        event.preventDefault();
      });
    },
    newsletterPopup : function() {
      $.magnificPopup.open({
        items : {
          src : "#newsletter-popup-form"
        },
        type : "inline",
        mainClass : "mfp-newsletter",
        removalDelay : 350,
        callbacks : {
          open : function() {
            if ($(".sticky-header.fixed").css("padding-right")) {
              $(".sticky-header.fixed").css("padding-right", window.innerWidth - document.body.clientWidth);
              $(".sticky-header.fixed-nav").css("padding-right", window.innerWidth - document.body.clientWidth);
              $("#scroll-top").css("margin-right", window.innerWidth - document.body.clientWidth);
              $(".minipopup-area").css("padding-right", window.innerWidth - document.body.clientWidth);
              $(".wishlist-popup").css("padding-right", window.innerWidth - document.body.clientWidth);
            }
          },
          afterClose : function() {
            if ($(".sticky-header.fixed").css("padding-right")) {
              $(".sticky-header.fixed").css("padding-right", "");
              $(".sticky-header.fixed-nav").css("padding-right", "");
              $("#scroll-top").css("margin-right", "");
              $(".minipopup-area").css("padding-right", "");
              $(".wishlist-popup").css("padding-right", "");
            }
          }
        }
      });
    },
    lightBox : function() {
      if (document.getElementById("newsletter-popup-form")) {
        setTimeout(function() {
          var that = $.magnificPopup.instance;
          if (that.isOpen) {
            that.close();
            setTimeout(function() {
              settings.newsletterPopup();
            }, 360);
          } else {
            settings.newsletterPopup();
          }
        }, 5E3);
      }
      var $responders;
      var refs = [];
      $responders = $(".product-slider-container").length > 0 ? $(".product-single-carousel .owl-item:not(.cloned) img") : $(".product-single-gallery img");
      if ($(".media-with-zoom").length > 0) {
        $responders = $(".media-with-zoom .owl-carousel .owl-item:not(.cloned) img");
      }
      if ($(".team-section").length > 0) {
        $responders = $(".team-section img");
      }
      $responders.each(function() {
        refs.push({
          src : $(this).attr("data-zoom-image")
        });
      });
      $(".prod-full-screen").click(function(event) {
        var GROUPS_END_POINT;
        GROUPS_END_POINT = event.currentTarget.closest(".product-slider-container") ? $(".product-single-carousel").data("owl.carousel").current() : $(event.currentTarget).closest(".product-item").index();
        if ($(event.currentTarget).closest(".post").length > 0) {
          GROUPS_END_POINT = $(event.currentTarget).closest(".owl-item:not(.cloned)").index();
        }
        if ($(event.currentTarget).closest(".team-info").length > 0) {
          GROUPS_END_POINT = $(event.currentTarget).closest(".team-info").parent().index();
        }
        $.magnificPopup.open({
          items : refs,
          navigateByImgClick : true,
          type : "image",
          gallery : {
            enabled : true
          }
        }, GROUPS_END_POINT);
      });
      $("body").on("click", "a.btn-quickview", function(event) {
        event.preventDefault();
        var jField = $(this);
        if (!jField.closest(".product-default").find("figure").hasClass("load-more-overlay")) {
          jField.closest(".product-default").find("figure").addClass("load-more-overlay");
          jField.closest(".product-default").find("figure").append('<i class="porto-loading-icon"></i>');
        }
        var testFilenames = $(this).attr("href");
        setTimeout(function() {
          $.magnificPopup.open({
            type : "ajax",
            mainClass : "mfp-ajax-product",
            tLoading : "",
            preloader : false,
            removalDelay : 350,
            items : {
              src : testFilenames
            },
            callbacks : {
              open : function() {
                if ($(".sticky-header.fixed").css("padding-right")) {
                  $(".sticky-header.fixed").css("padding-right", window.innerWidth - document.body.clientWidth);
                  $(".sticky-header.fixed-nav").css("padding-right", window.innerWidth - document.body.clientWidth);
                  $("#scroll-top").css("margin-right", window.innerWidth - document.body.clientWidth);
                }
              },
              ajaxContentAdded : function() {
                settings.ajaxLoading();
                jField.closest(".product-default").find("figure").removeClass("load-more-overlay");
                jField.closest(".product-default").find("figure .porto-loading-icon").remove();
                settings.quantityInputs($(".mfp-ajax-product"));
                settings.initProductSinglePage();
                settings.owlCarousels();
              },
              beforeClose : function() {
                $(".ajax-overlay").remove();
              },
              afterClose : function() {
                if ($(".sticky-header.fixed").css("padding-right")) {
                  $(".sticky-header.fixed").css("padding-right", "");
                  $(".sticky-header.fixed-nav").css("padding-right", "");
                  $("#scroll-top").css("margin-right", "");
                }
              }
            },
            ajax : {
              tError : ""
            }
          });
        }, 300);
      });
    },
    videoModal : function() {
      if ($.fn.magnificPopup) {
        $(".btn-iframe").magnificPopup({
          type : "iframe",
          preloader : false,
          fixedContentPos : false,
          closeBtnInside : false
        });
      }
    },
    linkToTab : function() {
      $("body").on("click", ".nav .nav-link", function(canCreateDiscussions) {
        if ($(".nav .nav-link").hasClass("address")) {
          $(".nav .nav-link").removeClass("address");
        }
      }).on("click", ".link-to-tab", function(event) {
        var element = $(this).attr("href");
        var n = $(element);
        var filteredView = n.parent().parent().find(".nav");
        event.preventDefault();
        n.siblings().removeClass("active show");
        n.addClass("active show");
        filteredView.find(".nav-link").removeClass("active");
        if ("#shipping" == element || "#billing" == element) {
          if (!filteredView.find('[href="#address"]').hasClass("address")) {
            filteredView.find('[href="#address"]').addClass("address");
          }
        } else {
          filteredView.find('[href="' + element + '"]').addClass("active");
        }
        $("html").animate({
          scrollTop : n.offset().top - 150
        });
      });
    },
    productTabSroll : function() {
      $(".rating-link").on("click", function(event) {
        if ($(".product-single-tabs").length) {
          $("#product-tab-reviews").tab("show");
        } else {
          if (!$(".product-single-collapse").length) {
            return;
          }
          $("#product-reviews-content").collapse("show");
        }
        if ($("#product-reviews-content").length) {
          setTimeout(function() {


            var selectionScrollTop = $("#product-reviews-content").offset().top - 60;
            $("html, body").stop().animate({
              scrollTop : selectionScrollTop
            }, 800);
          }, 250);
        }
        event.preventDefault();
      });
    },
    quantityInputs : function(selector = "body") {
      
      if ($.fn.TouchSpin) {
        $(selector).find(".vertical-quantity").TouchSpin({
          verticalbuttons : true,
          verticalup : "",
          verticaldown : "",
          verticalupclass : "icon-up-dir",
          verticaldownclass : "icon-down-dir",
          buttondown_class : "btn btn-outline",
          buttonup_class : "btn btn-outline",
          initval : 1,
          min : 1
        });
        $(selector).find(".horizontal-quantity").TouchSpin({
          verticalbuttons : false,
          buttonup_txt : "",
          buttondown_txt : "",
          buttondown_class : "btn btn-outline icon-minus",
          buttonup_class : "btn btn-outline icon-plus",
          initval : 1,
          min : 1
        });
      }
      var Toprice = $('#Toprice').html();
      if (Toprice == '') {
        $(selector).find(".horizontal-quantity").prop('disabled', true);
      } else {
        $(selector).find(".horizontal-quantity").prop('disabled', false);
      }
    },
    ajaxLoading : function() {
      $("body").append("<div class='ajax-overlay'></div>");
    },
    wordRotate : function() {
      if ($.isFunction($.fn.themePluginWordRotator)) {
        $(function() {
          $("[data-plugin-wort-rotator], .wort-rotator:not(.manual)").each(function() {
            var $elem = $(this);
            var speed__460220 = {};
            var pluginOptions = $elem.data("plugin-options");
            if (pluginOptions) {
              speed__460220 = pluginOptions;
            }
            $elem.themePluginWordRotator(speed__460220);
          });
        });
      }
    },
    toggleFilter : function() {
      $(".filter-toggle a").click(function(event) {
        event.preventDefault();
        $(".filter-toggle").toggleClass("opened");
        $("body").toggleClass("sidebar-opened");
      });
      $(".sidebar-overlay").click(function(canCreateDiscussions) {
        $(".filter-toggle").removeClass("opened");
        $("body").removeClass("sidebar-opened");
      });
      $(".sort-menu-trigger").click(function(event) {
        event.preventDefault();
        $(".select-custom").removeClass("opened");
        $(event.target).closest(".select-custom").toggleClass("opened");
      });
    },
    toggleSidebar : function() {
      $(".sidebar-toggle").click(function(event) {
        event.preventDefault();
        $("body").toggleClass("sidebar-opened");
      });
    },
    toggleCart : function() {
      $(".cart-toggle").click(function() {
        $("body").toggleClass("cart-opened");
      });
      $(".btn-close").click(function() {
        $("body").toggleClass("cart-opened");
      });
      $(".box-close").click(function() {
        $(this).parent().remove();
      });
      $(".cart-overlay").click(function(canCreateDiscussions) {
        $("body").removeClass("cart-opened");
      });
    },
    scrollToElement : function() {
      $('.scrolling-box a[href^="#"]').on("click", function(event) {
        var accitem1 = $(this.getAttribute("href"));
        if (accitem1.length) {
          event.preventDefault();
          $("html, body").stop().animate({
            scrollTop : accitem1.offset().top - 69
          }, 700);
        }
      });
    },
    loginPopup : function() {
      $(".login-link").click(function(event) {
        event.preventDefault();
        settings.ajaxLoading();
        $.magnificPopup.open({
          type : "ajax",
          mainClass : "login-popup",
          tLoading : "",
          preloader : false,
          removalDelay : 350,
          items : {
            src : "ajax/login-popup.html"
          },
          callbacks : {
            open : function() {
              if ($(".sticky-header.fixed").css("padding-right")) {
                $(".sticky-header.fixed").css("padding-right", window.innerWidth - document.body.clientWidth);
                $(".sticky-header.fixed-nav").css("padding-right", window.innerWidth - document.body.clientWidth);
                $("#scroll-top").css("margin-right", window.innerWidth - document.body.clientWidth);
              }
            },
            beforeClose : function() {
              $(".ajax-overlay").remove();
            },
            afterClose : function() {
              if ($(".sticky-header.fixed").css("padding-right")) {
                $(".sticky-header.fixed").css("padding-right", "");
                $(".sticky-header.fixed-nav").css("padding-right", "");
                $("#scroll-top").css("margin-right", "");
              }
            }
          },
          ajax : {
            tError : ""
          }
        });
      });
    },
    productManage : function() {
      $(".product-select").click(function(canCreateDiscussions) {
        $(this).parents(".product-default").find("figure img").attr("src", $(this).data("src"));
        $(this).addClass("checked").siblings().removeClass("checked");
      });
    },
    ratingTooltip : function() {
      $("body").on("mouseenter touchstart", ".product-ratings", function(canCreateDiscussions) {
        var label = $(this).find(".ratings").width() / $(this).width() * 5;
        $(this).find(".tooltiptext").text(label ? label.toFixed(2) : label);
      });
    },
    windowClick : function() {
      $(document).click(function(jEvent) {
        if (!$(jEvent.target).closest(".toolbox-item.select-custom").length) {
          $(".select-custom").removeClass("opened");
        }
      });
    },
    popupMenu : function() {
      if (!($(".popup-menu").length <= 0)) {
        var $this = $(".popup-menu-ul");
        var margin = $this.parent().width() - $this.children().width();
        if (margin >= 0) {
          $this.css("margin-right", "-" + margin + "px");
        }
        $this.css("margin-top", margin + "px");
        $(".popup-menu-toggler").on("click", function(event) {
          event.preventDefault();
          $(this).siblings(".popup-menu").addClass("open");
          $(document).on("keydown.popup-menu", function(event) {
            if (27 == event.which) {
              $(".popup-menu").removeClass("open");
              $(document).off("keydown.popup-menu");
            }
          });
        });
        $("body").on("click", ".popup-menu-close", function(event) {
          $(".popup-menu").removeClass("open");
          $(document).off("keydown.popup-menu");
          event.preventDefault();
        });
        $("body").on("click", ".popup-menu-ul li a", function(event) {
          var $openPanel = $(this).siblings("ul");
          if ($openPanel.length > 0) {
            if ($openPanel.length) {
              $openPanel.toggleClass("open");
            }
            event.preventDefault();
          }
        });
      }
    },
    topNotice : function() {
      if ($(".top-notice .mfp-close").length) {
        $("body").on("click", ".top-notice .mfp-close", function() {
          $(this).height();
          $(this).closest(".top-notice").fadeOut(function() {
            $(this).addClass("closed");
          });
        });
      }
    },
    ratingForm : function() {
      $("body").on("click", ".rating-form .rating-stars > a", function(event) {
        var i = $(this);
        i.addClass("active").siblings().removeClass("active");
        i.parent().addClass("selected");
        i.closest(".rating-form").find("select").val(i.text());
        event.preventDefault();
      });
    },
    parallax : function() {
      var e = $("[data-parallax]");
      var defaults = {
        speed : 1.5,
        horizontalPosition : "50%",
        offset : 0,
        enableOnMobile : true
      };
      if (e.length) {
        e.each(function() {
          var $this = $(this);
          var css = $this.data("parallax");
          if (css) {
            css = JSON.parse(css.replace(/'/g, '"').replace(";", ""));
          }
          var itemCSS;
          var s;
          var scroll_top;
          var element;
          var config = $.extend(true, {}, defaults, css);
          var $WINDOW = $(window);
          element = $('<div class="parallax-background"></div>');
          var containerImgSrc = $this.data("image-src") ? "url(" + $this.data("image-src") + ")" : $this.css("background-image");
          if (element.css({
            "background-image" : containerImgSrc,
            "background-size" : "cover",
            "background-position" : "50% 0%",
            position : "absolute",
            top : 0,
            left : 0,
            width : "100%",
            height : 100 * config.speed + "%"
          }), $this.prepend(element), $this.css({
            position : "relative",
            overflow : "hidden"
          }), !settings.mobile || config.enableOnMobile) {
            var parallax_setpos = function() {
              itemCSS = $this.offset();
              s = -($WINDOW.scrollTop() - (itemCSS.top - 100)) / (config.speed + 2);
              scroll_top = s < 0 ? Math.abs(s) : -Math.abs(s);
              element.css({
                transform : "translate3d(0, " + (scroll_top - 50 + config.offset) + "px, 0)",
                "background-position-x" : config.horizontalPosition
              });
            };
            $(window).on("scroll resize", parallax_setpos);
            parallax_setpos();
          } else {
            $this.addClass("parallax-disabled");
          }
        });
      }
    },
    isotopes : function() {
      var params = {
        itemsSelector : ".grid-item",
        masonry : {
          columnWidth : ".grid-col-sizer"
        },
        percentPosition : true,
        sortBy : "original-order",
        getSortData : {
          "md-order" : "[data-md-order] parseInt"
        },
        sortReorder : false
      };
      $(".grid").each(function() {
        var $element = $(this);
        var opts = $element.data("grid-options");
        if (opts) {
          opts = JSON.parse(opts.replace(/'/g, '"').replace(";", ""));
        }
        var options = $.extend(true, {}, params, opts);
        var $container = $element.isotope(options);
        if ("function" == typeof imagesLoaded && $.fn.isotope) {
          imagesLoaded(".grid", {
            background : true
          }).on("done", function(canCreateDiscussions, n) {
            if (window.innerWidth < 768 && window.innerWidth > 400) {
              $container.isotope({
                sortBy : "md-order"
              });
            }
            var pcnt = $element.find(".grid-item.height-xl").outerHeight();
            $element.find(".grid-item.height-xxl").css("height", 2 * pcnt);
            $(window).resize(function() {
              var pcnt = $element.find(".grid-item.height-xl").outerHeight();
              $element.find(".grid-item.height-xxl").css("height", 2 * pcnt);
              $container.isotope("layout");
            });
            $container.isotope("layout");
          });
        }
        if (options.sortReorder) {
          var resize = function() {
            var e = $(window).width();
            $container.isotope({
              sortBy : e < 768 && e > 400 ? "md-order" : "original-order"
            });
          };
          if ($.fn.smartresize) {
            $(window).smartresize(resize);
          } else {
            $(window).on("resize", resize);
          }
        }
      });
    },
    zoomImage : function() {
      $(window).resize(function() {
        $(".product-single-grid .product-single-gallery img").each(function() {
          var image = $(this);
          var options = {
            responsive : true,
            zoomWindowFadeIn : 350,
            zoomWindowFadeOut : 200,
            borderSize : 0,
            zoomContainer : image.parent(),
            zoomType : "inner",
            cursor : "grab"
          };
          image.elevateZoom(options);
        });
      });
    },
    sideMenu : function() {
      if ($(".side-menu").length) {
        $("body").on("click", ".side-menu-toggle", function(event) {
          $(this).siblings("ul").slideToggle("fast");
          $(this).parent().toggleClass("show");
          event.stopPropagation();
        });
      }
    },
    productsCartAction : function() {
      $("body").on("click", ".btn-add-cart.product-type-simple", function(event) {
        var filteredView;
        event.preventDefault();
        filteredView = $(this).closest(".product-default").length > 0 ? $(this).closest(".product-default") : $(this).closest(".product-row");
        settings.miniPopup.open({
          name : filteredView.find(".product-title").text(),
          nameLink : filteredView.find(".product-title > a").attr("href"),
          imageSrc : filteredView.find("figure img").attr("src"),
          imageLink : filteredView.find(".product-title > a").attr("href")
        });
      });
    },
    productsWishlistAction : function() {
      $("body").on("click", ".btn-icon-wish:not(.added-wishlist)", function(event) {
        event.preventDefault();
        var _$obj = $(this);
        _$obj.addClass("load-more-overlay loading");
        setTimeout(function() {
          _$obj.removeClass("load-more-overlay loading");
          _$obj.addClass("added-wishlist ");
          if ("" !== _$obj.find("span").text()) {
            _$obj.find("span").text("BROWSE WISHLIST");
          }
          _$obj.attr("title", "Go to Wishlist");
          $(".wishlist-popup").addClass("active");
        }, 1E3);
        setTimeout(function() {
          $(".wishlist-popup").removeClass("active");
        }, 3E3);
      });
    },
    initPurchasedMinipopup : function() {
      if ($(".product-single").length || $(".main-content").length) {
        setInterval(function() {
          settings.miniPopup.open({
            name : "Mobile Speaker",
            nameLink : "product.html",
            imageSrc : "assets/images/products/small/product-1.jpg",
            content : "Someone Purchased",
            action : '<span class="text-primary" style="font-size: 11px;">12 MINUTES AGO</span>'
          });
        }, 6E4);
      }
    },
    initJqueryParallax : function() {
      $(".home-slider ul.scene").parallax();
      $(".bg-parallax ul.scene").parallax();
    },
    ajaxLoadProducts : function() {
      var e = 0;
      $(".loadmore").click(function(event) {
        event.preventDefault();
        var n = $(this);
        var o = n.text();
        n.text("Loading ...");
        $.ajax({
          url : n.attr("href"),
          success : function(i) {
            var $alertArea = $(".product-ajax-grid");
            var a = $(i);
            setTimeout(function() {
              a.hide().appendTo($alertArea).fadeIn();
              n.text(o);
              if (++e >= 2) {
                n.hide();
              }
            }, 350);
          },
          failure : function() {
            n.text("Sorry something went wrong.");
          }
        });
      });
    },
    categoryNavScroll : function() {
      $(".category-list-nav").find("a").on("click", function(event) {
        var element = $(this).attr("href");
        var n = $(element);
        if (n.length) {
          var o = n.offset().top - 70;
          $("html, body").animate({
            scrollTop : o
          }, 700);
          event.preventDefault();
        }
      });
    },
    footerReveal : function() {
      var $el = $(".footer-reveal");
      if ($el.length) {
        var initialize = function() {
          if ($(window).width() >= 992) {
            $el.parent().css("margin-bottom", $el.outerHeight());
            $el.css("position", "fixed");
          } else {
            $el.parent().css("margin-bottom", "");
            $el.css("position", "static");
          }
        };
        $(window).resize(initialize);
        initialize();
      }
    },
    intObs : function(e, body, n, froot) {
      var s = document.querySelectorAll(e);
      var result = {
        rootMargin : "0px 0px 200px 0px"
      };
      if (Object.keys(n).length) {
        result = $.extend(result, n);
      }
      var self = new IntersectionObserver(function(data) {
        var index = 0;
        for (; index < data.length; index++) {
          var elements = data[index];
          if (elements.intersectionRatio > 0) {
            if ("string" == typeof body) {
              Function("return " + body)();
            } else {
              body.call($(elements.target));
            }
            if (!froot) {
              self.unobserve(elements.target);
            }
          }
        }
      }, result);
      $(s).each(function() {
        self.observe($(this)[0]);
      });
    }
  };
  settings.initProductSingle = function() {
    function VCanvas_canvas(width) {
      return this.init(width);
    }
    var disable = function(_self) {
      var height = _self.$thumbsWrap.offset().top;
      var y = _self.$thumbs.offset().top;
      if (y <= height - _self.$productThumb[0].offsetHeight) {
        _self.$thumbs.css("top", parseInt(_self.$thumbs.css("top")) + _self.$productThumb[0].offsetHeight);
        _self.$thumbDown.removeClass("disabled");
      } else {
        if (y < height) {
          _self.$thumbs.css("top", parseInt(_self.$thumbs.css("top")) - Math.ceil(y - height));
          _self.$thumbDown.removeClass("disabled");
          _self.$thumbUp.addClass("disabled");
        } else {
          _self.$thumbUp.addClass("disabled");
        }
      }
    };
    var changeDom = function(self) {
      var minY = self.$thumbsWrap.offset().top + self.$thumbsWrap[0].offsetHeight;
      var y = self.$thumbs.offset().top + self.$thumbsHeight;
      if (y >= minY + self.$productThumb[0].offsetHeight) {
        self.$thumbs.css("top", parseInt(self.$thumbs.css("top")) - self.$productThumb[0].offsetHeight);
        self.$thumbUp.removeClass("disabled");
      } else {
        if (y > minY) {
          self.$thumbs.css("top", parseInt(self.$thumbs.css("top")) - Math.ceil(y - minY));
          self.$thumbUp.removeClass("disabled");
          self.$thumbDown.addClass("disabled");
        } else {
          self.$thumbDown.addClass("disabled");
        }
      }
    };
    var initialize = function(that) {
      if (void 0 !== that.$thumbs) {
        if (that.$isPgVertical.length > 0) {
          that.$thumbsHeight = that.$productThumb[0].offsetHeight * that.$thumbsCount + parseInt(that.$productThumb.css("margin-bottom")) * (that.$thumbsCount - 1);
          that.$thumbUp.addClass("disabled");
          that.$thumbDown.toggleClass("disabled", that.thumbsHeight <= that.$thumbsWrap[0].offsetHeight);
        } else {
          if (!(that.$thumbs.hasClass("owl-carousel") || that.$thumbs.hasClass("transparent-dots") || that.$thumbs.hasClass("thumb-vertical"))) {
            that.$thumbs.addClass("owl-carousel owl-theme show-nav-hover").owlCarousel($.extend(true, (that.isQuickview, {}), {
              margin : 8,
              items : 4,
              dots : false,
              nav : true,
              navText : ['<i class="fas fa-chevron-left">', '<i class="fas fa-chevron-right">']
            }));
          }
        }
      }
    };
    return VCanvas_canvas.prototype.init = function($wrapper) {
      var self = this;
      var expandel = $wrapper.find(".product-single-carousel");
      self.$wrapper = $wrapper;
      self.isQuickview = !!$wrapper.closest(".mfp-content").length;
      self.$isPgVertical = self.$wrapper.find(".pg-vertical");
      $wrapper.find(".owl-dots").children().eq(0).addClass("active");
      expandel.on("initialized.owl.carousel", function() {
        !function(self) {
          if (self.$wrapper.find(".product-thumbs").length > 0) {
            self.$thumbs = self.$wrapper.find(".product-thumbs");
          } else {
            self.$thumbs = self.$wrapper.find(".prod-thumbnail");
          }
          self.$thumbsWrap = self.$thumbs.parent();
          self.$thumbsDots = self.$thumbs.children();
          self.$thumbsCount = self.$thumbsDots.length;
          self.$thumbUp = self.$thumbsWrap.parent().find(".thumb-up");
          self.$thumbDown = self.$thumbsWrap.parent().find(".thumb-down");
          self.$productThumb = self.$thumbsDots.eq(0);
          self.$thumbUp.on("click", function(canCreateDiscussions) {
            if (self.$isPgVertical) {
              disable(self);
            }
          });
          self.$thumbDown.on("click", function(canCreateDiscussions) {
            if (self.$isPgVertical) {
              changeDom(self);
            }
          });
          self.$thumbsDots.on("click", function() {
            var $n = $(this);
            var modifiedEventData = ($n.parent().filter(self.$thumbs).length ? $n : $n.parent()).index();
            self.$wrapper.find(".product-single-carousel").trigger("to.owl.carousel", modifiedEventData);
          });
          initialize(self);
          $(window).on("resize", function() {
            initialize(self);
          });
        }(self);
      }).on("translate.owl.carousel", function(event) {
        var selected = (event.item.index - $(event.currentTarget).find(".cloned").length / 2 + event.item.count) % event.item.count;
        self.thumbsSetActive(selected);
      });
      (function(data) {
        data.$selects = data.$wrapper.find(".product-single-filter select");
        data.$items = data.$wrapper.find(".product-single-filter:not(:last-child)");
        data.$priceWrap = data.$wrapper.find(".product-filtered-price");
        data.$clean = data.$wrapper.find(".product-single-filter:last-child");
        data.$btnCart = data.$wrapper.find(".add-cart");
        data.$btnView = data.$wrapper.find(".view-cart");
        data.$cartMessage = data.$wrapper.find(".cart-message");
        data.variationCheck();
        data.$selects.on("change", function(canCreateDiscussions) {
          data.variationCheck();
        });
        data.$items.find("li").on("click", function(event) {
          if (!$(this).children().hasClass("disabled")) {
            $(this).addClass("active").siblings().removeClass("active");
            event.preventDefault();
            data.variationCheck();
          }
        });
        data.$clean.find(".clear-btn").on("click", function(event) {
          event.preventDefault();
          data.variationClean(true);
        });
        data.$btnCart.on("click", function(event) {
          event.preventDefault();
          if (!data.$btnCart.hasClass("disabled")) {
            data.$btnCart.addClass("added-to-cart");
            data.$btnView.removeClass("d-none");
            data.$cartMessage.removeClass("d-none");
          }
        });
      })(this);
    }, VCanvas_canvas.prototype.thumbsSetActive = function(x) {
      var that = this;
      var dest = that.$thumbsDots.eq(x);
      if (that.$thumbsDots.filter(".active").removeClass("active"), dest.addClass("active"), that.$isPgVertical.length > 0) {
        var sliderDelta = parseInt(that.$thumbs.css("top")) + x * that.$thumbsHeight;
        if (sliderDelta < 0) {
          if (!that.$thumbUp.hasClass("disabled")) {
            that.$thumbUp.addClass("disabled");
          }
          if (that.$thumbDown.hasClass("disabled")) {
            that.$thumbDown.removeClass("disabled");
          }
          that.$thumbs.css("top", parseInt(that.$thumbs.css("top")) - sliderDelta);
        } else {
          if ((sliderDelta = that.$thumbs.offset().top + that.$thumbs[0].offsetHeight - dest.offset().top - dest[0].offsetHeight) < 0) {
            if (that.$thumbUp.hasClass("disabled")) {
              that.$thumbUp.removeClass("disabled");
            }
            if (!that.$thumbDown.hasClass("disabled")) {
              that.$thumbDown.addClass("disabled");
            }
            that.$thumbs.css("top", parseInt(that.$thumbs.css("top")) + sliderDelta);
          }
        }
      } else {
        that.$thumbs.trigger("to.owl.carousel", x, 100);
      }
    }, VCanvas_canvas.prototype.variationCheck = function() {
      var data = this;
      var i = true;
      data.$selects.each(function() {
        return this.value || (i = false);
      });
      data.$items.each(function() {
        var $testingGlobalParam = $(this);
        if ($testingGlobalParam.find("li").length) {
          if (!$testingGlobalParam.find(".active").length) {
            i = false;
          }
        }
      });
      if (i) {
        data.variationMatch();
      } else {
        data.variationClean();
      }
    }, VCanvas_canvas.prototype.variationMatch = function() {
      var $this = this;

      //$this.$priceWrap.find("span").text("$" + (Math.round(50 * Math.random()) + 170) + ".00");
      //$this.$priceWrap.find("span").text("$" + (Math.round(50 * Math.random()) + 170) + ".00");

      //$this.$priceWrap.find("del span").text("$" + (Math.round(50 * Math.random()) + 200) + ".00");
      $this.$priceWrap.slideDown();
      $this.$clean.slideDown();
      $this.$btnCart.removeClass("disabled");
    }, VCanvas_canvas.prototype.variationClean = function(zoomAware) {
      if (zoomAware) {
        this.$items.find(".active").removeClass("active");
      }
      if (zoomAware) {
        this.$selects.val("");
      }
      if (this.$btnCart.hasClass("added-to-cart")) {
        this.$btnCart.removeClass("added-to-cart");
      }
      this.$priceWrap.slideUp();
      this.$clean.slideUp();
      this.$btnView.addClass("d-none");
      this.$cartMessage.addClass("d-none");
      if (this.$wrapper.find(".product-single-filter").length > 0) {
        this.$btnCart.addClass("disabled");
      }
    }, function(footerCols, height) {
      return footerCols ? new VCanvas_canvas(footerCols.eq(0), height) : null;
    };
  }();
  settings.initProductSinglePage = function() {
    return ($form = $(".product-single-container")).length ? null === settings.initProductSingle($form) ? null : void 0 : null;
  };
  settings.miniPopup = (scrollLeft = 0, o = [], s = false, test = [], stepTimer = false, modifiedQSink = function() {
    if (!s) {
      var orIndex = 0;
      for (; orIndex < test.length; ++orIndex) {
        if ((test[orIndex] -= 200) <= 0) {
          this.close(orIndex--);
        }
      }
    }
  }, {
    init : function() {
      var title = document.createElement("div");
      title.className = "minipopup-area";
      $(".page-wrapper")[0].appendChild(title);
      (part = $(title)).on("click", ".mfp-close", function(canCreateDiscussions) {
        self.close($(this).closest(".minipopup-box").index());
      });
      var whiteBox = document.createElement("div");
      var e = document.createElement("div");
      whiteBox.className = "wishlist-popup";
      e.className = "wishlist-popup-msg";
      e.innerText = "Product added!";
      $(".page-wrapper")[0].appendChild(whiteBox);
      $(".wishlist-popup").append(e);
      this.close = this.close.bind(this);
      modifiedQSink = modifiedQSink.bind(this);
    },
    open : function(value, url) {
      var target;
      var self = this;
      var config = $.extend(true, {}, settings.minipopup, value);
      target = $(template(config.template, config));
      self.space = config.space;
      target.appendTo(part).css("top", -scrollLeft).find("img")[0].onload = function() {
        scrollLeft = scrollLeft + (target[0].offsetHeight + self.space);
        target.addClass("active");
        if (target.offset().top - window.pageYOffset < 0) {
          self.close();
          target.css("top", -scrollLeft + target[0].offsetHeight + self.space);
        }
        target.on("mouseenter", function() {
          self.pause();
        }).on("mouseleave", function() {
          self.resume();
        }).on("touchstart", function(event) {
          self.pause();
          event.stopPropagation();
        }).on("mousedown", function() {
          $(this).addClass("focus");
        }).on("mouseup", function() {
          self.close($(this).index());
        });
        $("body").on("touchstart", function() {
          self.resume();
        });
        o.push(target);
        test.push(config.delay);
        if (!(test.length > 1)) {
          stepTimer = setInterval(modifiedQSink, 200);
        }
        if (url) {
          url(target);
        }
      };
    },
    close : function(name) {
      var id = void 0 === name ? 0 : name;
      var contents = o.splice(id, 1)[0];
      test.splice(id, 1)[0];
      scrollLeft = scrollLeft - (contents[0].offsetHeight + this.space);
      contents.removeClass("active");
      setTimeout(function() {
        contents.remove();
      }, 300);
      o.forEach(function(t, other) {
        if (other >= id && t.hasClass("active")) {
          t.stop(true, true).animate({
            top : parseInt(t.css("top")) + t[0].offsetHeight + 20
          }, 600, "easeOutQuint");
        }
      });
      if (!o.length) {
        clearTimeout(stepTimer);
      }
    },
    pause : function() {
      s = true;
    },
    resume : function() {
      s = false;
    }
  });
  var template = function(elem, options) {
    return elem.replace(/\{\{(\w+)\}\}/g, function() {
      return options[arguments[1]];
    });
  };
  jQuery(document).ready(function() {
    settings.init();
    setTimeout(() => {
      settings.appearAnimate();
      settings.scrollBtnAppear();
    }, 500);
  });
  $(window).on("load", function() {
    $("body").addClass("loaded");
  });
  $(window).on("scroll", function() {
    settings.scrollBtnAppear();
  });
}(jQuery);
